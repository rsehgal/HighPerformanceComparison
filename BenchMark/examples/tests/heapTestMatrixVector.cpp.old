#include <iostream>
#include <common.h>
#include "Vector3DFast.h"
#include <blaze/Math.h>
#include "TBBStopWatch.h"
#include <fstream>
using namespace blaze;

int main()
{
std::system("rm -rf timingHeapMatrixVector.txt");
std::ofstream outfile;
outfile.open("timingHeapMatrixVector.txt",std::ios::app); //File to store timing information

Vector3DFast temp(0,0,0);
double *matrixArray=new double[9];
for(int i=0;i<9;i++)
{
*(matrixArray+i)=2.5;
}

//Creating Matrix using Blaze
DynamicMatrix<double,rowMajor> bl_A(3,3,matrixArray);

//Creating Matrix using Sandro's Library
FastTransformationMatrix A;
A.SetRotation(matrixArray);


int iter=20;
time_t t;
time(&t);
srand((double)t);
int N=10000,doValidation=0;
for(int k=1;k<=iter;k++)
{
int n=N*k;
Vector3DFast *a=new Vector3DFast[n];
Vector3DFast *b=new Vector3DFast[n];

StaticVector<int,3UL,columnVector> *bl_a=new StaticVector<int,3UL,columnVector>[n];
StaticVector<int,3UL,columnVector> *bl_b=new StaticVector<int,3UL,columnVector>[n];


for(int i=0 ; i<n ; i++) //Filling data in vectors
{
//Generating Random data to fill Vector3DFast and Blaze 3D Vectors
double tempa_x=rand()%100;
double tempa_y=rand()%100;
double tempa_z=rand()%100;


//Filling Vector3DFast 3D Vectors
a[i].Set(tempa_x,tempa_y,tempa_z);

//Filling Blaze 3D Vectors
StaticVector<int,3UL,columnVector> tempVect_a(tempa_x,tempa_y,tempa_z);
bl_a[i]=tempVect_a;

} //Data filling over

std::cout<<"---------------------------------------------"<<std::endl;
std::cout<<"Data filled successfully"<<std::endl;
std::cout<<"Now lets do the real stuff"<<std::endl;
if(doValidation)
std::cout<<"Data Validation switched ON"<<std::endl;
else
std::cout<<"Data Validation switched OFF"<<std::endl;
std::cout<<"---------------------------------------------"<<std::endl;

//Adding Stopwatch
StopWatch tmr;
double Tacc=0.0;
Tacc=0.0;
tmr.getOverhead(100);
Tacc=0.0;
tmr.Start();

//Real Stuff of Vector Processing
for(int i=0 ; i<n ; i++) //Start Vector Processing
{
#ifdef USEAV
//For AVX don't know why this extra stuff is required, otherwise SEGMENTATION FAULT
//Actually this should not be required and it should work like "c[i]=a[i]+b[i]+d[i]"
//std::cout<<"------ USING AVX --------"<<std::endl;
Vector3DFast av(0,0,0);
av.Set(a[i].GetX(),a[i].GetY(),a[i].GetZ());

Vector3DFast bv(0,0,0);

A.MasterToLocal<0,1>(av,bv); //Multiplying Matrix with Vector

b[i].Set(bv.GetX(),bv.GetY(),bv.GetZ());

#else
//For SSE it works as expected
//std::cout<<"------ USING SSE --------"<<std::endl;
A.MasterToLocal<0,1>(a[i],b[i]);
#endif
//std::cout<<"********* "<<b[i]<<" ***********"<<std::endl;
}
tmr.Stop();
Tacc=tmr.getDeltaSecs();
std::cout<<"Execution Time N="<<n<<"  :  "<<Tacc<< " :::: ";
outfile<<n<<"\t"<<Tacc<<"\t";
//outfile<<std::endl;


//----------------------------

Tacc=0.0;
tmr.getOverhead(100);
Tacc=0.0;
tmr.Start();
for(int i=0 ; i<n ; i++) //Start Vector Processing for Blaze
{
//BLAZE is OK in both cases
bl_b[i]=bl_A * bl_a[i];

}

tmr.Stop();
Tacc=tmr.getDeltaSecs();
std::cout<<Tacc<<" :::: "<<std::endl;
outfile<<Tacc<<std::endl;


//----------------------------------------

if(doValidation)
{
for(int i=0 ; i<n ; i++) //Do Validation
  {
    if((bl_b[i][0]-b[i].GetX()) || (bl_b[i][1]-b[i].GetY()) || (bl_b[i][2]-b[i].GetZ()))
      std::cout<<"Result Differs : Validation Fails"<<std::endl;
    //else
    //  std::cout<<"Result Matches : Validation Successfull"<<std::endl;
  }
}

//delete a;delete b

}// iter loop ends
outfile.close();
} //main ends here
